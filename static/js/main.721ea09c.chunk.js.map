{"version":3,"sources":["components/Tasks/Tasks.js","App.js","index.js"],"names":["Tasks","tasks","removeTask","className","map","task","index","key","taskName","onClick","e","App","useState","id","setTasks","todo","setTodo","onSubmit","preventDefault","newTodo","Math","floor","random","alert","type","placeholder","value","onChange","target","remainTodo","splice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAqBeA,G,YAnBD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACtB,OACE,yBAAKC,UAAU,kBACZF,EAAMG,KAAI,SAACC,EAAMC,GAAP,OACT,wBAAIC,IAAKD,GACND,EAAKG,SAAU,IAChB,4BACEC,QAAS,SAACC,GACRR,EAAWQ,EAAGJ,KAFlB,YC6CKK,MAhDf,WAAgB,IAAD,EACaC,mBAAS,CACjC,CAAEC,GAAI,EAAGL,SAAU,gBACnB,CAAEK,GAAI,EAAGL,SAAU,qBACnB,CAAEK,GAAI,EAAGL,SAAU,sBAJR,mBACNP,EADM,KACCa,EADD,OAMWF,mBAAS,IANpB,mBAMNG,EANM,KAMAC,EANA,KA0Bb,OACE,yBAAKb,UAAU,aACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,kBACb,0BAAMc,SAvBO,SAACP,GACpBA,EAAEQ,iBACF,IAAMC,EAAO,CACX,CAAEN,GAAIO,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAAGd,SAAUO,IADzC,mBAERd,IAEQ,KAATc,EACFQ,MAAM,eAENT,EAASK,GAEXH,EAAQ,MAaA,2BACEQ,KAAK,OACLC,YAAY,eACZC,MAAOX,EACPY,SAAU,SAACjB,GAAD,OAAOM,EAAQN,EAAEkB,OAAOF,YAOxC,kBAAC,EAAD,CAAOzB,MAAOA,EAAOC,WAtBR,SAACQ,EAAGJ,GACrBI,EAAEQ,iBACF,IAAMW,EAAU,YAAO5B,GACD4B,EAAWC,OAAOxB,EAAO,GAC/CQ,EAASe,SCxBbE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.721ea09c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Tasks.css\";\nconst Tasks = ({ tasks, removeTask }) => {\n  return (\n    <div className=\"task-container\">\n      {tasks.map((task, index) => (\n        <h2 key={index}>\n          {task.taskName}{\" \"}\n          <button\n            onClick={(e) => {\n              removeTask(e, index);\n            }}\n          >\n            x\n          </button>\n        </h2>\n      ))}\n    </div>\n  );\n};\n\nexport default Tasks;\n","import React from \"react\";\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport Tasks from \"./components/Tasks/Tasks\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([\n    { id: 1, taskName: \"Do some work\" },\n    { id: 2, taskName: \"Do some more work\" },\n    { id: 3, taskName: \"No work avaiable\" },\n  ]);\n  const [todo, setTodo] = useState(\"\");\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const newTodo = [\n      { id: Math.floor(Math.random() * 20) + 4, taskName: todo },\n      ...tasks,\n    ];\n    if (todo === \"\") {\n      alert(\"empty input\");\n    } else {\n      setTasks(newTodo);\n    }\n    setTodo(\"\");\n  };\n  const removeTask = (e, index) => {\n    e.preventDefault();\n    const remainTodo = [...tasks];\n    const newRemainTodo = remainTodo.splice(index, 1);\n    setTasks(remainTodo);\n  };\n  return (\n    <div className=\"container\">\n      <div className=\"todo-are\">\n        <div className=\"form-container\">\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              placeholder=\"What to do ?\"\n              value={todo}\n              onChange={(e) => setTodo(e.target.value)}\n            />\n          </form>\n        </div>\n        {/* {tasks.map((task) => (\n          <Tasks key={task.id} tasks={task} removeTask={removeTask}></Tasks>\n        ))} */}\n        <Tasks tasks={tasks} removeTask={removeTask}></Tasks>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}